buildscript {
    dependencies {
        classpath 'org.flywaydb:flyway-mysql:9.16.3'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id("com.diffplug.spotless") version "7.0.3"
    id "org.flywaydb.flyway" version "9.16.3"
}

group = 'be.ddd'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
repositories {
    mavenCentral()
}

spotless {
    java {
        target 'src/**/*.java'
        googleJavaFormat().aosp()
        importOrder(['java', 'javax', 'org', 'com', 'static'] as String)
        trimTrailingWhitespace()
        endWithNewline()
        removeUnusedImports()

        targetExclude 'build/generated/querydsl/**'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //mysql
    runtimeOnly 'com.mysql:mysql-connector-j'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //batch
    implementation 'org.springframework.boot:spring-boot-starter-webflux' // WebClient 용
    implementation 'org.springframework.boot:spring-boot-starter-batch'

    //querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

    //jjwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // JSON 파싱용

    implementation 'org.springframework.boot:spring-boot-starter-security'
}

def querydslSrcDir = 'build/generated/querydsl'

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

sourceSets {
    main {
        java.srcDirs += "$buildDir/generated/querydsl"
    }
}

clean {
    delete file(querydslSrcDir)
}
tasks.register('initGitHooks', Copy) {
    from("$rootDir/githooks") {
        include 'pre-commit'
    }

    into("$rootDir/.git/hooks")

    doLast {
        def hookFile = file("$rootDir/.git/hooks/pre-commit")
        if (hookFile.exists()) {
            hookFile.executable = true
            logger.lifecycle("✅ pre-commit hook installed and set executable")
        } else {
            logger.warn("⚠ pre-commit hook not found at ${hookFile}")
        }
    }
}

tasks.named('clean') {
    dependsOn 'initGitHooks'
}

tasks.named('test') {
    useJUnitPlatform()
}

flyway {
    url = findProperty('flywayUrl') ?: System.getenv('FLYWAY_URL')
    user = findProperty('flywayUser') ?: System.getenv('FLYWAY_USER')
    password = findProperty('flywayPassword') ?: System.getenv('FLYWAY_PASSWORD')
    locations = ['classpath:db/migration']
    baselineOnMigrate = true
    cleanDisabled = false
}
